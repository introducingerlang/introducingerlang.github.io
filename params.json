{"name":"Introducing Erlang","tagline":"From Install to First Working App in 30 minutes","body":"# Introducing Erlang #\r\nThe goal of this website is to get Erlang installed on your system and write a non-trivial working application in 30 minutes.  Through this we aim to show a gentle introduction to a carefully chosen set of Erlang's features so you can decide if Erlang is a good language for your needs.\r\n\r\n## Installing Erlang ##\r\n[Precompiled binaries][0] are available for:\r\n\r\n* Windows\r\n* Mac OS X\r\n* Ubuntu, Debian, Fedora and CentOS\r\n\r\nIf you prefer to install Erlang from source, we recommend you use a tool like [kerl][1] which offers the same kind of isolation for Erlang environments that a tool like virtualenv brings to Python.  Installation using kerl is straight forward:\r\n\r\n     $ curl -O https://raw.github.com/spawngrid/kerl/master/kerl\r\n     $ chmod a+x kerl\r\n     $ ./kerl update releases\r\n     $ ./kerl build R16B03-1 r16b03-1\r\n     $ ./kerl install r16b03-1 ~/erlang/r16b03-1\r\n     $ ~/erlang/r16b03-1/activate\r\n\r\nWhich ever way you install Erlang, it's a good idea to test that the Erlang REPL is in your path.  You start the Erlang REPL by using the command `erl`.  You should see something like:\r\n\r\n     $ erl\r\n     Erlang R16B03 (erts-5.10.4) [source] [64-bit] [smp:8:8] [async-threads:0] [kernel-poll:false]\r\n\r\n     Eshell V5.10.4  (abort with ^G)\r\n     1> \r\n\r\nThe `1>` prompt is your opportunity to start with a simple Erlang expression.\r\n\r\n     1> \"Hello world!\".\r\n     \"Hello world!\"\r\n     2> 2 + 2.\r\n     4\r\n     3> random:uniform(1000).\r\n     444\r\n\r\nLike my fourth grade English teacher, Erlang cares a lot about periods. A period is how the Erlang parser knows you've finished an expression.  If you forget to put one on the end of an expression, the REPL will not return a value.\r\n\r\n     5> forgotten_period\r\n     5> \r\n\r\nNotice that the REPL doesn't increment the command counter; that's a subtle clue its still on expression 5. To complete the expression, you can just enter a single period `.` and hit enter.\r\n\r\n     5> forgotten_period \r\n     5> .\r\n     forgotten_period\r\n\r\nWhen you're tired of playing around with simple expressions, you can exit the REPL by executing the `q().` function which tells the REPL to quit and terminate the Erlang VM.\r\n\r\n[0]: https://www.erlang-solutions.com/downloads/download-erlang-otp\r\n[1]: https://github.com/spawngrid/kerl","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}